







Agora que temos uma noção de como funciona a interface podemos passar para os testes.

Antes de mais, preciso de referir que para realizar os testes utilizamos o servidor multilidae o qual instalamos na máquina virtual metaxploitable2.
E fizemos uso do Firefox para comunicarmos como o servidor.




############################# Spyder a website ##############################


Spider é um scan passivo e inofencivo destinado a procurar em pedidos e respostas falhas como security headers ou anti CSRF tokens em falta. 

Para realizar este teste basta-nos aceder ao site alvo, através do Firefox, para obtermos o seu URL e posteriormente selecionarmos, como se pode ver na figura, sobre esse URL, a opção Atacar -> Spider.



























--------------------------------------------------------------------------------





















Como se pode ver na figura seguinte temos um mapeamento do site correspondente ao conteúdo e as imagens da página do site requerida.
As bandeiras que se podem ver ao lado dos pedidos indicam alertas nas respostas obtidas, as cores variam do azul, passando por amarelo e laranja até ao vermelho em nivel crescente de perigo.























Nesta próxima imagem observamos os alertas condensados, ou seja sem alertas repetidos, obtidos na realização do scan ativo sobre o Website. O nosso teste está concluido. No entanto convêm sublinhar que o spyder é apenas o primeiro passo para a deteção de possíveis falhas mas não prova nenhuma.





















------------------------------------------------------------------------------

############################## Fuzz a website ################################

Neste caso tentaremos obter informação da base de dados com código Sql.

O primeiro passo é obter um pedido de autenticação ao servidor. Para isso realizamos uma tentativa de acesso que foi apanhada pelo ZAP com um breakpoint.


Em seguida selecionamos com o botão direito do rato o Pedido e escolhemos a opção Fuzzer. No Fuzzer selecionamos a palavra admin com a qual nos tentamos autenticar e escolhemos adicionar ataque. Neste caso optamos por escolher uma injeção SQL básica que visa provocar um erro no site ou uma indicação da sintaxe da base de dados.



























Como podemos ver o ZAP executou várias tentativas de login para além da original. 
Podemos observar os payloads e os estados. Reflected significam que quando os payloads foram inseridos fomos redirecionados para outra página, esta pode ser uma página de erro ou outra diferente. Neste caso não queremos ver a página ou páginas para as quais os pedidos foram redirecionados. Pegamos por isso no último payload da figura e fomos testar no site, colocando-o no lugar do username obtendo o seguinte resultado.






















Como se pode ver na figura temos agora bastante informação sobre a base de dados, sabemos que está em SQL temos a sintax da query feita á base de dados, temos o nome da tabela na base de dados onde se encontram os registos dos utilizadores que se chama accounts e temos 2 campos dessa tabela que são "username" e "password". Agora poderiamos prosseguir para ataques mais sofisticados fazendo uso desta informação.


























------------------------------------------------------------------------------

########################### Cross Site Scripting ##############################

 Neste teste vamos mais uma vez focar-nos em realizar o ataque quando o utilizador efetua o login.





















Mais uma vez vamos usar o Fuzzer para modificar o campo do username, mas desta vez vamos selecionar as seguintes opções de XSS para verificar se conseguimos redirecionar o utilizador para uma página diferente:




- URI Cross Site Scripting, XSS Style injection e XSS XML injection.




















Desta vez aqueles campos em que se vêm as estrelas amarelas com a tag reflected são os ataques bem sucedidos visto que querem modificar a página para a qual o utilizador é enviado.




















Neste caso, usamos o payload 

<script>alert(‘XSS’);</script>

e obtivemos a seguinte reflexão com sucesso.



















------------------------------------------------------------------------------

O último ataque de que vou falar é 
################### Obtençao de ficheiros escondidos ##########################


 Neste ataque nós pretendemos descobrir ficheiros escondidos no servidor. Para isso podemos utilizar a opção "force browse directory (and children)".
 
 Nós utilizamos esta opção uma vez que a opção "force browse directory" não mostra tudo o que encontra.



























Como resultado obtemos uma enorme lista de tentativas de pedidos feitos por brute force.  A melhor forma de encontrar o que pretendemos é procurar nesta lista palavras chave como password, accounts, private, entre outras.

























 A imagem seguinte mostra o resultado da pesquisa por password, onde de facto foi encontrada uma pasta chamada passwords onde foi realizado um pedido Get accounts.txt que foi recusado.
 Agora para vermos se atingimos o nosso objetivo só temos de retirar o url do pedido e verificar o que está nesse ficheiro.
 

































 Para isso abrimos o Firefox e inserimos o url obtendo o conteúdo de um ficheiro que contem todos os dados de acesso ás contas dos utilizadores registados do multilidae.





